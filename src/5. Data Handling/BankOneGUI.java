/**
 * This file was generated by Winstanley's Computer Science Department. 
 * The appropriate copyright license applies.
 * 
 * All click() Functions have been edited accordingly to ensure Functionality  
**/

import java.awt.*;
import javax.swing.*;


public class BankOneGUI
{
    AccountList database = new AccountList();
    BankAccount ba = new BankAccount();

    JFrame bankWindow = new JFrame();

    JTabbedPane theTabs = new JTabbedPane();

    JPanel bankPanel = new JPanel(null); 

    DefaultListModel<String> listModel = new DefaultListModel<>();
    JList<String> listAll= new JList<>(listModel);


    JButton btnMakeDeposit = new JButton();
    JButton btnAddToArray = new JButton();
    JButton btnWriteToFile = new JButton();
    JLabel lblNumInArray = new JLabel();
    JTextField tfNumInArray = new JTextField();
    JLabel lblAccountNum = new JLabel();
    JLabel lblSortCode = new JLabel();
    JLabel lblBalance = new JLabel();
    JLabel lblMaxOverdraft = new JLabel();
    JLabel lblUserType = new JLabel();
    JTextField tfAccountNumber = new JTextField();
    JTextField tfSortCode = new JTextField();
    JTextField tfBalance = new JTextField();
    JTextField tfMaxOverdraft = new JTextField();
    JTextField tfUserType = new JTextField();
    JLabel lblNumInFile = new JLabel();
    JTextField tfNumInFile = new JTextField();
    JLabel lblListBox = new JLabel();

    JButton btnMakeWithdrawal = new JButton();
    JButton btnClearAll = new JButton();


    public void initFrame()
    {
        bankWindow.setLayout(new GridLayout(1,1));
        bankWindow.add(theTabs);

        bankWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        bankWindow.setSize(1200,765);

        initComponents();

        theTabs.addTab("Title",bankPanel);
        theTabs.addTab("Blank",new JPanel());
        bankWindow.setVisible(true);

    }




    public void initComponents()
    {
        listAll.setLocation(700,200);
        listAll.setSize(400,300);
        bankPanel.add(listAll);

        btnMakeDeposit.setLocation(50,400);
        btnMakeDeposit.setSize(150,50);
        btnMakeDeposit.addActionListener(e->btnMakeDeposit_Click());
        btnMakeDeposit.setText("Make Deposit");
        bankPanel.add(btnMakeDeposit);

        btnMakeWithdrawal.setLocation(50,500);
        btnMakeWithdrawal.setSize(150,50);
        btnMakeWithdrawal.addActionListener(e->btnMakeWithdrawal_Click());
        btnMakeWithdrawal.setText("Make Withdrawal");
        bankPanel.add(btnMakeWithdrawal);

        btnAddToArray.setLocation(250,400);
        btnAddToArray.setSize(150,50);
        btnAddToArray.addActionListener(e->btnAddToArray_Click());
        btnAddToArray.setText("Add To Array");
        bankPanel.add(btnAddToArray);

        btnClearAll.setLocation(250,500);
        btnClearAll.setSize(150,50);
        btnClearAll.addActionListener(e->btnClearAll_Click());
        btnClearAll.setText("New (Clear All)");
        bankPanel.add(btnClearAll);

        btnWriteToFile.setLocation(450,400);
        btnWriteToFile.setSize(150,50);
        btnWriteToFile.addActionListener(e->btnWriteToFile_Click());
        btnWriteToFile.setText("Save All To File");
        bankPanel.add(btnWriteToFile);

        lblNumInArray.setLocation(700,20);
        lblNumInArray.setSize(100,50);
        lblNumInArray.setOpaque(true);
        lblNumInArray.setText("Num in Array:");
        bankPanel.add(lblNumInArray);

        tfNumInArray.setEnabled(false);
        tfNumInArray.setLocation(800,20);
        tfNumInArray.setSize(100,50);
        bankPanel.add(tfNumInArray);

        lblAccountNum.setLocation(100,0);
        lblAccountNum.setSize(150,50);
        lblAccountNum.setOpaque(true);
        lblAccountNum.setText("Account Number:");
        bankPanel.add(lblAccountNum);

        lblSortCode.setLocation(100,50);
        lblSortCode.setSize(150,50);
        lblSortCode.setOpaque(true);
        lblSortCode.setText("Sort Code:");
        bankPanel.add(lblSortCode);

        lblBalance.setLocation(100,100);
        lblBalance.setSize(150,50);
        lblBalance.setOpaque(true);
        lblBalance.setText("Balance:");
        bankPanel.add(lblBalance);

        lblMaxOverdraft.setLocation(100,150);
        lblMaxOverdraft.setSize(150,50);
        lblMaxOverdraft.setOpaque(true);
        lblMaxOverdraft.setText("Max Overdraft:");
        bankPanel.add(lblMaxOverdraft);

        lblUserType.setLocation(100,200);
        lblUserType.setSize(150,50);
        lblUserType.setOpaque(true);
        lblUserType.setText("User Type:");
        bankPanel.add(lblUserType);

        tfAccountNumber.setLocation(300,0);
        tfAccountNumber.setSize(100,50);
        bankPanel.add(tfAccountNumber);

        tfSortCode.setLocation(300,50);
        tfSortCode.setSize(100,50);
        bankPanel.add(tfSortCode);

        tfBalance.setEnabled(false);
        tfBalance.setText("0");
        tfBalance.setLocation(300,100);
        tfBalance.setSize(100,50);
        bankPanel.add(tfBalance);

        tfMaxOverdraft.setEnabled(false);
        tfMaxOverdraft.setText("-1000");
        tfMaxOverdraft.setLocation(300,150);
        tfMaxOverdraft.setSize(100,50);
        bankPanel.add(tfMaxOverdraft);

        tfUserType.setEnabled(false);
        tfUserType.setText("C");
        tfUserType.setLocation(300,200);
        tfUserType.setSize(100,50);
        bankPanel.add(tfUserType);

        lblNumInFile.setLocation(700,70);
        lblNumInFile.setSize(100,50);
        lblNumInFile.setOpaque(true);
        lblNumInFile.setText("Num in File: ");
        bankPanel.add(lblNumInFile);

        tfNumInFile.setEnabled(false);
        tfNumInFile.setLocation(800,70);
        tfNumInFile.setSize(100,50);
        bankPanel.add(tfNumInFile);

        lblListBox.setLocation(700,170);
        lblListBox.setSize(150,20);
        lblListBox.setOpaque(true);
        lblListBox.setText("Contents of Array");
        bankPanel.add(lblListBox);

    }
    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
    /* Limit of Winstanley's Computer Science Department Generated Code */
    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


    public void  btnMakeDeposit_Click() {
        int amount = 0;

        /* User Entry Validation */
        try {
            /* Ensure it is an Integer Entered */
            amount = Integer.parseInt(JOptionPane.showInputDialog(bankWindow, "Enter the amount to Deposit: "));

            /* Range between {amount: 0 <= amount <= 10_000 } */
            if (amount < 0 || amount > 10_000) {
                JOptionPane.showMessageDialog(bankWindow, "Enter an integer under 10,000.", "Error!", JOptionPane.WARNING_MESSAGE);
                return;
            };
        } catch (Exception exc) {
            JOptionPane.showMessageDialog(bankWindow, "Enter a valid integer.", "Error!", JOptionPane.WARNING_MESSAGE);
            return;
        };

        /* Add the value to the Balance */
        ba.makeDeposit(amount);
        tfBalance.setText(ba.getBalance() + "");
    };

    public void btnAddToArray_Click() {
        /* Validation */
        if (tfAccountNumber.getText().matches("\\d{8}") == false) {
            JOptionPane.showMessageDialog(bankWindow, "Ensure a valid Account Number is entered.\nExample: 12341234", "Error!", JOptionPane.WARNING_MESSAGE);
            return;
        };
        ba.accountNumber = tfAccountNumber.getText();
        if (tfSortCode.getText().matches("\\d{6}") == false) {
            JOptionPane.showMessageDialog(bankWindow, "Ensure a valid SortCode is entered.\nExample: 123123", "Error!", JOptionPane.WARNING_MESSAGE);
            return;
        };
        ba.sortCode = tfSortCode.getText();

        /* Fetch Non-User-Inputted Values */
        ba.maxOverdraft = Integer.parseInt(tfMaxOverdraft.getText());
        ba.setBalance(Integer.parseInt(tfBalance.getText()));
        ba.userType = tfUserType.getText().charAt(0);

        database.addAccountToList(ba);

        /* Update the values displayed */
        listModel.addElement(ba.accountNumber + "= Â£" + ba.getBalance());
        btnClearAll_Click();
        tfNumInArray.setText(database.totalRecords + "");
    };

    public void  btnWriteToFile_Click() {
        database.exportAllAccounts();
        tfNumInFile.setText(database.totalRecords + "");
    };

    public void btnMakeWithdrawal_Click() {
        int amount = 0;

        /* User Entry Validation */
        try {
            /* Ensure it is an Integer Entered */
            amount = Integer.parseInt(JOptionPane.showInputDialog(bankWindow, "Enter the amount to Withdraw: "));

            /* Range between {amount: 0 <= amount <= 10_000 } */
            if (amount < 0 || amount > 10_000) {
                JOptionPane.showMessageDialog(bankWindow, "Enter an integer under 10,000", "Error!", JOptionPane.WARNING_MESSAGE);
                return;
            };
        } catch (Exception exc) {
            JOptionPane.showMessageDialog(bankWindow, "Enter a valid integer.", "Error!", JOptionPane.WARNING_MESSAGE);
            return;
        };

        /* Make a Withdraw */
        boolean status = ba.makeWithdrawal(amount);
        if (status == false) { // Was it Successful?
            JOptionPane.showMessageDialog(bankWindow, "You don't have that much money...", "Overdraft Error!", JOptionPane.WARNING_MESSAGE);
            return;
        }
        tfBalance.setText(ba.getBalance() + "");
    };

    public void btnClearAll_Click() {
        /* Reset All Values */
        ba = new BankAccount();

        tfAccountNumber.setText("");
        tfSortCode.setText("");

        tfBalance.setText(ba.getBalance() + "");
        tfMaxOverdraft.setText(ba.maxOverdraft + "");
        tfUserType.setText(ba.userType + "");
    };

    public static void main(String[] args) {
        BankOneGUI myClass = new BankOneGUI();
        myClass.initFrame();
    };
};
