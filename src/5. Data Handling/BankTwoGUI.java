/**
 * This file was generated by Winstanley's Computer Science Department. 
 * The appropriate copyright license applies.
 * 
 * All click() Functions have been edited accordingly to ensure Functionality
 * Changes begin on Line 240
**/

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;

public class BankTwoGUI {

    /* Global Declarations of External Classes*/
    AccountList database = new AccountList();
    BankAccount ba = new BankAccount();
    
    JFrame bankWindow = new JFrame();
   
    JTabbedPane theTabs = new JTabbedPane();
    JPanel bankPanel = new JPanel(null); 
    
    DefaultListModel<String> listModel = new DefaultListModel<>();
    JList<String> listAll= new JList<>(listModel);
    
    
    JButton btnMakeDeposit = new JButton();
    JButton btnAddToArray = new JButton();
    JButton btnWriteToFile = new JButton();
    JLabel lblNumInArray = new JLabel();
    JTextField tfNumInArray = new JTextField();
    JLabel lblAccountNum = new JLabel();
    JLabel lblSortCode = new JLabel();
    JLabel lblBalance = new JLabel();
    JLabel lblMaxOverdraft = new JLabel();
    JLabel lblUserType = new JLabel();
    JTextField tfAccountNumber = new JTextField();
    JTextField tfSortCode = new JTextField();
    JTextField tfBalance = new JTextField();
    JTextField tfMaxOverdraft = new JTextField();
    JTextField tfUserType = new JTextField();
    JLabel lblNumInFile = new JLabel();
    JTextField tfNumInFile = new JTextField();
    JLabel lblListBox = new JLabel();

    JButton btnMakeWithdrawal = new JButton();
    JButton btnClearAll = new JButton();

    JPanel searchSortPanel = new JPanel(null); 
    
    JButton btnSort = new JButton();
    JButton btnSearch = new JButton();
    JButton btnRefreshTable = new JButton();
    JButton btnReadFile = new JButton();
    
    /* Global Declaration of Table Headings */
    String[] headings= {"Account Number", "SortCode", "Balance"};
    
    /* Defines the Table and TableModel */
    DefaultTableModel model = new DefaultTableModel(headings, 0);
    JTable demoTable = new JTable(model);
    JScrollPane demoTableScroll = new JScrollPane(demoTable);
    

    public void initFrame()
    {
        bankWindow.setLayout(new GridLayout(1,1));
        bankWindow.add(theTabs);
        
        bankWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        bankWindow.setSize(1200, 765);
        
        initComponents();
        initComponentsTwo();
   
        theTabs.addTab("Title", bankPanel);
        theTabs.addTab("Sorting & Searching", searchSortPanel);
        
        theTabs.setEnabledAt(0, false);
        theTabs.setSelectedIndex(1);
        
        bankWindow.setVisible(true);
    }

    public void initComponents()
    {
        listAll.setLocation(700, 200);
        listAll.setSize(400, 300);
        bankPanel.add(listAll);
    
        btnMakeDeposit.setLocation(50, 400);
        btnMakeDeposit.setSize(150, 50);
        btnMakeDeposit.addActionListener(e->btnMakeDeposit_Click());
        btnMakeDeposit.setText("Make Deposit");
        bankPanel.add(btnMakeDeposit);
        
        btnMakeWithdrawal.setLocation(50, 500);
        btnMakeWithdrawal.setSize(150, 50);
        btnMakeWithdrawal.addActionListener(e->btnMakeWithdrawal_Click());
        btnMakeWithdrawal.setText("Make Withdrawal");
        bankPanel.add(btnMakeWithdrawal);
        
        btnAddToArray.setLocation(250, 400);
        btnAddToArray.setSize(150, 50);
        btnAddToArray.addActionListener(e->btnAddToArray_Click());
        btnAddToArray.setText("Add To Array");
        bankPanel.add(btnAddToArray);
        
        btnClearAll.setLocation(250,500);
        btnClearAll.setSize(150,50);
        
        btnClearAll.addActionListener(e->btnClearAll_Click());
        
        btnClearAll.setText("New (Clear All)");
        bankPanel.add(btnClearAll);
        
        btnWriteToFile.setLocation(450,400);
        btnWriteToFile.setSize(150,50);
        btnWriteToFile.addActionListener(e->btnWriteToFile_Click());
        btnWriteToFile.setText("Save All To File");
        bankPanel.add(btnWriteToFile);
    
        lblNumInArray.setLocation(700,20);
        lblNumInArray.setSize(100,50);
        lblNumInArray.setOpaque(true);
        lblNumInArray.setText("Num in Array:");
        bankPanel.add(lblNumInArray);
    
        tfNumInArray.setEnabled(false);
        tfNumInArray.setLocation(800,20);
        tfNumInArray.setSize(100,50);
        bankPanel.add(tfNumInArray);
    
        lblAccountNum.setLocation(100,0);
        lblAccountNum.setSize(150,50);
        lblAccountNum.setOpaque(true);
        lblAccountNum.setText("Account Number:");
        bankPanel.add(lblAccountNum);
        
        lblSortCode.setLocation(100,50);
        lblSortCode.setSize(150,50);
        lblSortCode.setOpaque(true);
        lblSortCode.setText("Sort Code:");
        bankPanel.add(lblSortCode);
    
        lblBalance.setLocation(100,100);
        lblBalance.setSize(150,50);
        lblBalance.setOpaque(true);
        lblBalance.setText("Balance:");
        bankPanel.add(lblBalance);
    
        lblMaxOverdraft.setLocation(100,150);
        lblMaxOverdraft.setSize(150,50);
        lblMaxOverdraft.setOpaque(true);
        lblMaxOverdraft.setText("Max Overdraft:");
        bankPanel.add(lblMaxOverdraft);
    
        lblUserType.setLocation(100,200);
        lblUserType.setSize(150,50);
        lblUserType.setOpaque(true);
        lblUserType.setText("User Type:");
        bankPanel.add(lblUserType);
    
        tfAccountNumber.setLocation(300,0);
        tfAccountNumber.setSize(100,50);
        bankPanel.add(tfAccountNumber);
        
        tfSortCode.setLocation(300,50);
        tfSortCode.setSize(100,50);
        bankPanel.add(tfSortCode);
    
        tfBalance.setEnabled(false);
        tfBalance.setText("0");
        tfBalance.setLocation(300,100);
        tfBalance.setSize(100,50);
        bankPanel.add(tfBalance);
    
        tfMaxOverdraft.setEnabled(false);
        tfMaxOverdraft.setText("-1000");
        tfMaxOverdraft.setLocation(300,150);
        tfMaxOverdraft.setSize(100,50);
        bankPanel.add(tfMaxOverdraft);
    
        tfUserType.setEnabled(false);
        tfUserType.setText("C");
        tfUserType.setLocation(300,200);
        tfUserType.setSize(100,50);
        bankPanel.add(tfUserType);
    
        lblNumInFile.setLocation(700,70);
        lblNumInFile.setSize(100,50);
        lblNumInFile.setOpaque(true);
        lblNumInFile.setText("Num in File: ");
        bankPanel.add(lblNumInFile);
    
        tfNumInFile.setEnabled(false);
        tfNumInFile.setLocation(800,70);
        tfNumInFile.setSize(100,50);
        bankPanel.add(tfNumInFile);
    
        lblListBox.setLocation(700,170);
        lblListBox.setSize(150,20);
        lblListBox.setOpaque(true);
        lblListBox.setText("Contents of Array");
        bankPanel.add(lblListBox);
    }

    public void initComponentsTwo()
    {
        btnSort.setLocation(50,400);
        btnSort.setSize(150,50);
        btnSort.addActionListener(e->btnSort_Click());
        btnSort.setText("Do Sort");
        searchSortPanel.add(btnSort);
        
        btnSearch.setLocation(250,400);
        btnSearch.setSize(150,50);
        btnSearch.addActionListener(e->btnSearch_Click());
        btnSearch.setText("Do Search");
        searchSortPanel.add(btnSearch);
        
        btnRefreshTable.setLocation(450,400);
        btnRefreshTable.setSize(150,50);
        btnRefreshTable.addActionListener(e->btnResetTable_Click());
        btnRefreshTable.setText("Refresh Table");
        searchSortPanel.add(btnRefreshTable);
        
        btnReadFile.setLocation(50,500);
        btnReadFile.setSize(550,50);
        btnReadFile.addActionListener(e->btnReadFile_Click());
        btnReadFile.setText("Read from File");
        searchSortPanel.add(btnReadFile);
        
        demoTableScroll.setSize(700,350); 
        demoTableScroll.setLocation(30,30); 
        searchSortPanel.add(demoTableScroll);
    }
    
    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
    /* Limit of Winstanley's Computer Science Department Generated Code */
    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
    /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


    public void  btnMakeDeposit_Click() { // This TAB is LOCKED
        JOptionPane.showMessageDialog(null, "Not implemented");
    };
    public void btnMakeWithdrawal_Click() { // This TAB is LOCKED
        JOptionPane.showMessageDialog(null, "Not implemented");
    };
    public void btnAddToArray_Click() { // This TAB is LOCKED
        JOptionPane.showMessageDialog(null, "Not implemented");
    };
    public void btnWriteToFile_Click() {  // This TAB is LOCKED
        database.exportAllAccounts();
        tfNumInFile.setText(database.totalRecords + "");
    };
    public void btnClearAll_Click() {  // This TAB is LOCKED
        tfAccountNumber.setText("");
        tfSortCode.setText("");  
        ba = new BankAccount();
    };


    public void btnSort_Click() {
        removeAllBankAccountRows();
        database.sortByBalance(); /* Use the METHOD from AccountList */
        addAllBankAccountRows();
    };

    public void btnSearch_Click() {
        String searchQuery = JOptionPane.showInputDialog("Account Number to search?");
        removeAllBankAccountRows();

        /* Search for the Account */
        int index = database.searchByAccountNumber(searchQuery);
        if (index != -1) {
            /* If found, fetch the Record */
            BankAccount baTemp = database.allAccounts[index];

            /* Format the Data and Add to the Table */
            String[] row = new String[] {
                baTemp.accountNumber,
                baTemp.sortCode,
                baTemp.getBalance() + "",
            };
            model.addRow(row);
        }
        /* Account not Found */
        else {
            String[] row = new String[] {
                "NOT FOUND", "NOT FOUND", "NOT FOUND",
            };
            model.addRow(row);
        };
    };

    public void btnResetTable_Click() {
        removeAllBankAccountRows();
        addAllBankAccountRows();
    };

    public void btnReadFile_Click() {
        database.importAllAccounts();
    };

    public void removeAllBankAccountRows() {
        int numberOfRows = model.getRowCount();
        for (int count = 0; count < numberOfRows; count++) {
            model.removeRow(0);
        };
    };

    public void addAllBankAccountRows() {

        /* Loop through all Records */
        int numberOfRecords = database.totalRecords;
        for (int index = 0; index < numberOfRecords; index++) {
            /* Fetch the BankAccount Information */
            BankAccount baTemp = database.allAccounts[index];

            /* Convert BankAccount to String Array */
            String[] rows = new String[] {
                baTemp.accountNumber,
                baTemp.sortCode,
                baTemp.getBalance() + "",
            };

            /* Add the data to the Table */
            model.addRow(rows);
        };
    };

    public static void main(String[] args ) {
        BankTwoGUI myClass = new BankTwoGUI();
        myClass.initFrame();
    };
};
